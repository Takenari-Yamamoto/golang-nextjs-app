// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// GetTasksIDHandlerFunc turns a function with the right signature into a get tasks ID handler
type GetTasksIDHandlerFunc func(GetTasksIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetTasksIDHandlerFunc) Handle(params GetTasksIDParams) middleware.Responder {
	return fn(params)
}

// GetTasksIDHandler interface for that can handle valid get tasks ID params
type GetTasksIDHandler interface {
	Handle(GetTasksIDParams) middleware.Responder
}

// NewGetTasksID creates a new http.Handler for the get tasks ID operation
func NewGetTasksID(ctx *middleware.Context, handler GetTasksIDHandler) *GetTasksID {
	return &GetTasksID{Context: ctx, Handler: handler}
}

/*
	GetTasksID swagger:route GET /tasks/{id} getTasksId

Get a task by ID
*/
type GetTasksID struct {
	Context *middleware.Context
	Handler GetTasksIDHandler
}

func (o *GetTasksID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetTasksIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
