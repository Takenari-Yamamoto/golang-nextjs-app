// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostTaskHandlerFunc turns a function with the right signature into a post task handler
type PostTaskHandlerFunc func(PostTaskParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostTaskHandlerFunc) Handle(params PostTaskParams) middleware.Responder {
	return fn(params)
}

// PostTaskHandler interface for that can handle valid post task params
type PostTaskHandler interface {
	Handle(PostTaskParams) middleware.Responder
}

// NewPostTask creates a new http.Handler for the post task operation
func NewPostTask(ctx *middleware.Context, handler PostTaskHandler) *PostTask {
	return &PostTask{Context: ctx, Handler: handler}
}

/*
	PostTask swagger:route POST /task postTask

# Create a new task

This endpoint creates a new task with the given title and content.
*/
type PostTask struct {
	Context *middleware.Context
	Handler PostTaskHandler
}

func (o *PostTask) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostTaskParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostTaskBadRequestBody post task bad request body
//
// swagger:model PostTaskBadRequestBody
type PostTaskBadRequestBody struct {

	// message
	// Example: Invalid input, please provide the required parameters.
	Message string `json:"message,omitempty"`
}

// Validate validates this post task bad request body
func (o *PostTaskBadRequestBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post task bad request body based on context it is used
func (o *PostTaskBadRequestBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTaskBadRequestBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTaskBadRequestBody) UnmarshalBinary(b []byte) error {
	var res PostTaskBadRequestBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTaskBody post task body
//
// swagger:model PostTaskBody
type PostTaskBody struct {

	// The content of the task
	// Required: true
	Content *string `json:"content"`

	// The title of the task
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this post task body
func (o *PostTaskBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateContent(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTaskBody) validateContent(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"content", "body", o.Content); err != nil {
		return err
	}

	return nil
}

func (o *PostTaskBody) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"title", "body", o.Title); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post task body based on context it is used
func (o *PostTaskBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTaskBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTaskBody) UnmarshalBinary(b []byte) error {
	var res PostTaskBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTaskCreatedBody post task created body
//
// swagger:model PostTaskCreatedBody
type PostTaskCreatedBody struct {

	// message
	// Example: Task created successfully.
	Message string `json:"message,omitempty"`

	// task
	Task *PostTaskCreatedBodyTask `json:"task,omitempty"`
}

// Validate validates this post task created body
func (o *PostTaskCreatedBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateTask(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTaskCreatedBody) validateTask(formats strfmt.Registry) error {
	if swag.IsZero(o.Task) { // not required
		return nil
	}

	if o.Task != nil {
		if err := o.Task.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postTaskCreated" + "." + "task")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postTaskCreated" + "." + "task")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this post task created body based on the context it is used
func (o *PostTaskCreatedBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateTask(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostTaskCreatedBody) contextValidateTask(ctx context.Context, formats strfmt.Registry) error {

	if o.Task != nil {
		if err := o.Task.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("postTaskCreated" + "." + "task")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("postTaskCreated" + "." + "task")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *PostTaskCreatedBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTaskCreatedBody) UnmarshalBinary(b []byte) error {
	var res PostTaskCreatedBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTaskCreatedBodyTask post task created body task
//
// swagger:model PostTaskCreatedBodyTask
type PostTaskCreatedBodyTask struct {

	// content
	Content string `json:"content,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// title
	Title string `json:"title,omitempty"`
}

// Validate validates this post task created body task
func (o *PostTaskCreatedBodyTask) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post task created body task based on context it is used
func (o *PostTaskCreatedBodyTask) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTaskCreatedBodyTask) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTaskCreatedBodyTask) UnmarshalBinary(b []byte) error {
	var res PostTaskCreatedBodyTask
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostTaskInternalServerErrorBody post task internal server error body
//
// swagger:model PostTaskInternalServerErrorBody
type PostTaskInternalServerErrorBody struct {

	// message
	// Example: Internal server error.
	Message string `json:"message,omitempty"`
}

// Validate validates this post task internal server error body
func (o *PostTaskInternalServerErrorBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post task internal server error body based on context it is used
func (o *PostTaskInternalServerErrorBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostTaskInternalServerErrorBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostTaskInternalServerErrorBody) UnmarshalBinary(b []byte) error {
	var res PostTaskInternalServerErrorBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
