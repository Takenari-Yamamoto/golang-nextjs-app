swagger: "2.0"
info:
  title: Golang Next.js API
  description: This is a sample API
  version: 1.0.0
host: localhost:5000
basePath: /v1
schemes:
  - http
paths:
  /users:
    get:
      summary: Get a list of users
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/User"
  /users/{id}:
    get:
      summary: Get a user by ID
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the user to get
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/User"
  /tasks:
    get:
      summary: Get a list of tasks
      produces:
        - application/json
      responses:
        200:
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Task"
  /tasks/{id}:
    get:
      summary: Get a task by ID
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: ID of the task to get
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/Task"
  /task:
    post:
      summary: Create a new task
      description: This endpoint creates a new task with the given title and content.
      parameters:
        - in: formData
          name: title
          type: string
          required: true
          description: The title of the task.
        - in: formData
          name: content
          type: string
          required: true
          description: The content of the task.
      responses:
        201:
          description: Task created successfully.
          schema:
            type: object
            properties:
              message:
                type: string
                example: Task created successfully.
              task:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                  title:
                    type: string
                  content:
                    type: string
        400:
          description: Invalid input, please provide the required parameters.
          schema:
            type: object
            properties:
              message:
                type: string
                example: Invalid input, please provide the required parameters.
        500:
          description: Internal server error.
          schema:
            type: object
            properties:
              message:
                type: string
                example: Internal server error.

definitions:
  User:
    type: object
    properties:
      id:
        type: string
      name:
        type: string
      status:
        type: string
      email:
        type: string
      age:
        type: integer
      created_at:
        type: string
        format: date-time
  Task:
    type: object
    properties:
      id:
        type: string
      title:
        type: string
      content:
        type: string
      done:
        type: boolean
      created_by:
        type: string
      created_at:
        type: string
        format: date-time
